# Stories and tasks derived from Hermes Chat epics. Comments link back to docs/BRANDING.md context.
stories:
  - id: STORY-HC-001
    epic_id: EPIC-HC-001
    title: Align shared theming tokens with Hermes Chat palette
    priority: P0
    description: >-
      Update shared design tokens and component themes to adopt Hermes Chat naming, palettes,
      and typography while preserving WCAG AA accessibility budgets across light and dark modes.
    # Context: Visual identity pillars defined in docs/BRANDING.md#positioning--value-proposition.
    acceptance_criteria:
      - >-
        `packages/const/theme.ts` exports Hermes Chat palette variables, typography scale, and spacing
        tokens that pass automated contrast audits.
      - >-
        `apps/web/styles/global.less` references updated token names without breaking existing imports.
      - >-
        Percy/Chromatic snapshots confirm no regressions on the marketing home hero and dashboard shell.
    testing:
      - >-
        Add `tests/visual/brand.spec.ts` coverage for theme switcher permutations and run via CI pipeline.
      - >-
        Execute `bunx vitest run --silent='passed-only' 'tests/unit/theme*'` locally before merge.
    documentation:
      - >-
        Document new token naming table in `docs/development/design-system.md` including rationale.
    tasks:
      - id: TASK-HC-001A
        type: engineering
        owner: design-platform
        description: >-
          Refactor `packages/const/theme.ts` to export Hermes-specific palettes, gradients, and font stacks
          with backwards-compatible aliases for downstream packages.
        references:
          - packages/const/theme.ts
          - apps/web/styles/global.less
        automation:
          - Update `scripts/rebrand_hermes_chat.sh` to regenerate CSS variables and purge CDN caches.
        testing:
          - Percy baseline refresh + `bunx vitest run --silent='passed-only' 'tests/unit/theme*'`.
        documentation:
          - Add changelog entry in `docs/changelog/2025-hermes-chat-launch.md` detailing token updates.
      - id: TASK-HC-001B
        type: engineering
        owner: qa-automation
        description: >-
          Extend visual regression harness in `tests/visual/brand.spec.ts` covering hero, dashboard shell,
          and settings themes with Hermes branding toggles.
        references:
          - tests/visual/brand.spec.ts
          - packages/const/theme.ts
        automation:
          - Configure Percy project to block merges on diff threshold >0.2%.
        testing:
          - Run updated visual suite via CI and capture baseline artifacts in S3 bucket.
        documentation:
          - Update `docs/development/testing/visual-regression.md` with new coverage map.

  - id: STORY-HC-002
    epic_id: EPIC-HC-001
    title: Refresh marketing and in-app assets for Hermes Chat visuals
    priority: P1
    description: >-
      Produce Hermes Chat-branded assets, integrate them into marketing and app surfaces, and automate
      export pipelines to avoid manual uploads.
    # Context: Asset changeover scheduled post-domain cutover per docs/BRANDING.md#dependencies--action-items.
    acceptance_criteria:
      - >-
        New SVG/PNG assets live in `public/brand/hermes-chat/` with hashed filenames for cache busting.
      - >-
        In-app modal illustrations and email templates pull Hermes imagery via centralized CDN paths.
      - >-
        Asset export pipeline can be triggered via `scripts/rebrand_hermes_chat.sh assets`.
    testing:
      - >-
        Run automated accessibility lint to confirm Alt text for marketing hero and in-app modals.
      - >-
        Execute `bunx vitest run --silent='passed-only' 'tests/unit/emailTemplates*'` to catch asset regressions.
    documentation:
      - >-
        Embed before/after comparisons in `docs/BRANDING.md` and asset source references in `docs/wiki/design/`.
    tasks:
      - id: TASK-HC-002A
        type: design
        owner: brand-studio
        description: >-
          Generate Hermes Chat hero, favicon, and email illustration assets; export to `public/brand/hermes-chat/`
          using Figma automation plugins.
        references:
          - public/brand/
          - scripts/rebrand_hermes_chat.sh
        automation:
          - Extend export CLI to pull from Figma API and upload directly to CDN bucket.
        testing:
          - Accessibility audit via axe-core CLI ensuring Alt text metadata.
        documentation:
          - Update asset inventory table in `docs/wiki/design/hermes-chat-visual-system.md`.
      - id: TASK-HC-002B
        type: engineering
        owner: growth-eng
        description: >-
          Wire Hermes assets into marketing Next.js pages (`apps/web/app/(marketing)`) and transactional email
          templates in `packages/const/emails.ts` with feature flag for staged rollout.
        references:
          - apps/web/app/(marketing)
          - packages/const/emails.ts
        automation:
          - Add asset integrity check to `scripts/rebrand_hermes_chat.sh verify-assets` command.
        testing:
          - Run `bunx vitest run --silent='passed-only' 'tests/unit/emailTemplates*'` and preview marketing pages locally.
        documentation:
          - Capture rollout plan in `docs/development/release-checklist.md`.

  - id: STORY-HC-003
    epic_id: EPIC-HC-002
    title: Replace product strings and configs with Hermes nomenclature
    priority: P0
    description: >-
      Update server and client configuration values, user-visible copy, and automation webhooks to reference
      Hermes Chat across the stack with governance guardrails for future regressions.
    # Context: Minimizes naming confusion tracked in docs/BRANDING.md#success-metrics--signals.
    acceptance_criteria:
      - >-
        `packages/const/app.ts` and `src/config/branding.ts` expose Hermes Chat metadata with fallback aliases removed.
      - >-
        OAuth callback descriptors and webhook payloads emit `brand: "hermes-chat"` keys.
      - >-
        CI job fails when `rg "Hermes Chat"` finds strings outside approved archive list.
    testing:
      - >-
        Add `tests/e2e/rebrand.spec.ts` coverage for onboarding, workspace rename, and billing flows.
      - >-
        Execute contract tests for webhook payloads using `tests/automation/webhook-contract.spec.ts`.
    documentation:
      - >-
        Update `docs/usage/enterprise-guide.md` and `docs/self-hosting/configuration.md` with new environment variable names.
    tasks:
      - id: TASK-HC-003A
        type: engineering
        owner: platform-core
        description: >-
          Refactor `packages/const/app.ts`, `packages/const/emails.ts`, and `src/config/branding.ts` to centralize Hermes Chat
          copy, tagline, and support links while removing deprecated exports.
        references:
          - packages/const/app.ts
          - packages/const/emails.ts
          - src/config/branding.ts
        automation:
          - Extend `scripts/rebrand_hermes_chat.sh lint-strings` to check for forbidden tokens.
        testing:
          - Run `bunx vitest run --silent='passed-only' 'tests/unit/config*'`.
        documentation:
          - Record API name changes in `docs/changelog/2025-hermes-chat-launch.md`.
      - id: TASK-HC-003B
        type: engineering
        owner: integrations
        description: >-
          Update webhook + OAuth fixtures in `tests/automation/` and `apps/web/api/` to emit Hermes identifiers and validate
          via staging connectors.
        references:
          - tests/automation/webhook-contract.spec.ts
          - apps/web/api/
        automation:
          - Add smoke validation to CI using staging credentials with masked secrets via GitHub OIDC.
        testing:
          - Execute connector smoke tests via `bun run test:connectors --filter hermes`.
        documentation:
          - Update integration guides in `docs/usage/integrations/*.md` to reflect new identifiers.

  - id: STORY-HC-004
    epic_id: EPIC-HC-002
    title: Localize Hermes Chat copy and enforce translation workflow
    priority: P1
    description: >-
      Refresh localization bundles for Hermes Chat messaging in English and zh-CN, establish automation to flag
      untranslated strings, and update translation QA scripts.
    # Context: Launch parity requirement from docs/BRANDING.md#launch-constraints--guardrails.
    acceptance_criteria:
      - >-
        `locales/en-US/*.json` and `locales/zh-CN/*.json` reflect Hermes copy for navigation, emails, and modals.
      - >-
        Localization QA sign-off recorded with screenshot diffs in the translation backlog.
      - >-
        i18n CI step fails when new strings ship without Hermes translations.
    testing:
      - >-
        Execute `bunx vitest run --silent='passed-only' 'tests/i18n/*'` and review screenshot diffs.
      - >-
        Run `bun run lint:i18n` to ensure namespace completeness.
    documentation:
      - >-
        Add translation workflow updates to `docs/development/i18n.md`.
    tasks:
      - id: TASK-HC-004A
        type: localization
        owner: localization-guild
        description: >-
          Update translation files in `locales/en-US/` and `locales/zh-CN/` with Hermes Chat copy, referencing the approved
          messaging architecture worksheet.
        references:
          - locales/en-US/
          - locales/zh-CN/
        automation:
          - Configure Crowdin/GitHub sync to auto-open PRs on new source strings.
        testing:
          - `bunx vitest run --silent='passed-only' 'tests/i18n/*'` with locale-specific snapshots.
        documentation:
          - Note QA evidence links in `docs/development/i18n.md`.
      - id: TASK-HC-004B
        type: engineering
        owner: tooling
        description: >-
          Enhance i18n pipeline to block merges when Hermes translations missing; update `scripts/rebrand_hermes_chat.sh
          validate-i18n` command to run in CI.
        references:
          - scripts/rebrand_hermes_chat.sh
          - .github/workflows/i18n.yml
        automation:
          - Add CI job invoking `scripts/rebrand_hermes_chat.sh validate-i18n` with summary comment on PR.
        testing:
          - Dry-run workflow in staging branch to validate gating behavior.
        documentation:
          - Update `docs/development/release-checklist.md` with new localization gate.

  - id: STORY-HC-005
    epic_id: EPIC-HC-003
    title: Provision Hermes Chat domains with automated infrastructure-as-code
    priority: P0
    description: >-
      Implement infrastructure-as-code updates to manage DNS, TLS certificates, and environment variables for the Hermes Chat
      domain suite while ensuring auditability and staged rollouts.
    # Context: Domain strategy defined in docs/BRANDING.md#naming--domain-strategy.
    acceptance_criteria:
      - >-
        Terraform/Pulumi modules in `infrastructure/domains/` declare Hermes hostnames with staged validation and outputs stored
        in secrets manager.
      - >-
        ACME certificate automation validated in staging with automated renewal alerts integrated into PagerDuty.
      - >-
        Environment variables in `.env.production` templates reflect Hermes URLs with fallback support for legacy tenants.
    testing:
      - >-
        Run infrastructure unit tests via `pnpm --filter infrastructure test` (or equivalent) and stage apply in sandbox.
      - >-
        Execute synthetic monitoring script `tests/synthetic/domains.spec.ts` after staging deploy.
    documentation:
      - >-
        Update `docs/self-hosting/migration-hermes-chat.md` with DNS cutover checklist and rollback procedure.
    tasks:
      - id: TASK-HC-005A
        type: engineering
        owner: sre
        description: >-
          Extend Terraform/Pulumi stacks to include Hermes Chat records, certificate resources, and Traffic Manager routing,
          using canary weighted distribution.
        references:
          - infrastructure/domains/
          - .github/workflows/rebrand-cutover.yml
        automation:
          - Add automated drift detection via Terraform Cloud or Pulumi Deploy with weekly reports.
        testing:
          - Sandbox `terraform plan` or `pulumi preview` recorded and attached to PR.
        documentation:
          - Document apply/rollback SOP in `docs/self-hosting/migration-hermes-chat.md`.
      - id: TASK-HC-005B
        type: engineering
        owner: sre
        description: >-
          Configure GitHub Actions workflow `.github/workflows/rebrand-cutover.yml` to orchestrate staged deploy, approval gates,
          and synthetic health checks post-deploy.
        references:
          - .github/workflows/rebrand-cutover.yml
          - tests/synthetic/domains.spec.ts
        automation:
          - Implement required approvals from SRE + compliance teams with Slack notifications.
        testing:
          - Dry-run workflow using staging secrets and verify auto-rollback triggers on failure.
        documentation:
          - Update `docs/development/release-checklist.md` with workflow diagram.
      - id: TASK-HC-005C
        type: engineering
        owner: platform-core
        description: >-
          Align `.env.example` and `.env.production` templates, plus supporting helpers in `src/envs/`, to emit Hermes Chat URLs
          with backward-compatible legacy fallbacks and environment detection shims to simplify migration for enterprise tenants.
        references:
          - .env.example
          - .env.production
          - src/envs/
          - scripts/rebrand_hermes_chat.sh
        automation:
          - Extend `scripts/rebrand_hermes_chat.sh` with an env-matrix lint that cross-validates template keys against runtime loaders
            and blocks merges when Hermes/legacy permutations drift.
        testing:
          - Add matrix coverage to `tests/config/env-matrix.spec.ts` ensuring every permutation bootstraps correct Hermes URLs and
            fails fast on missing secrets.
        documentation:
          - Update `.env.example` header comments and `docs/self-hosting/configuration.md` with Hermes URL mapping tables and
            automated validation expectations.
      - id: TASK-HC-005D
        type: engineering
        owner: sre
        description: >-
          Automate ACME certificate issuance and renewal for Hermes domains with staged validation, telemetry hooks, and PagerDuty
          renewal alerts to guarantee zero-touch lifecycle management across environments.
        references:
          - infrastructure/domains/
          - .github/workflows/rebrand-cutover.yml
          - scripts/automation/
        automation:
          - Add Terraform/Ansible modules invoking ACME DNS-01 challenges with audit logging, integrate renewal status into
            PagerDuty via webhook automation, and schedule renewal simulations through GitHub Actions.
        testing:
          - Implement renewal dry-run simulations in staging, exercising validation hooks via `scripts/automation/cert-renewal.sh`
            and recording results in CI artifacts.
        documentation:
          - Document staged validation runbooks, PagerDuty escalation policies, and telemetry dashboards in
            `docs/self-hosting/migration-hermes-chat.md` and `docs/development/reliability.md`.

  - id: STORY-HC-006
    epic_id: EPIC-HC-003
    title: Execute redirect and monitoring rollout for Hermes domains
    priority: P1
    description: >-
      Implement redirect logic, monitoring dashboards, and incident response updates to support Hermes Chat domain cutover
      without customer downtime.
    # Context: Redirect promises captured in docs/BRANDING.md#naming--domain-strategy.
    acceptance_criteria:
      - >-
        Redirect map configured in `apps/web/middleware.ts` covering top 200 legacy URLs with analytics tagging.
      - >-
        Observability dashboards updated to reflect Hermes domains and error budgets.
      - >-
        Statuspage + PagerDuty integrations send Hermes-labeled notifications.
    testing:
      - >-
        Synthetic monitoring assertions for redirect latency (<200ms p95) using `tests/synthetic/domains.spec.ts`.
      - >-
        Chaos test verifying rollback toggles via feature flag in `packages/const/featureFlags.ts`.
    documentation:
      - >-
        Update incident response SOP in `docs/self-hosting/failover.md` and `docs/development/oncall-runbook.md`.
    tasks:
      - id: TASK-HC-006A
        type: engineering
        owner: platform-core
        description: >-
          Implement redirect + feature flag logic in `apps/web/middleware.ts` and `packages/const/featureFlags.ts` with telemetry
          events instrumented for adoption analytics.
        references:
          - apps/web/middleware.ts
          - packages/const/featureFlags.ts
        automation:
          - Add redirect coverage check to `scripts/rebrand_hermes_chat.sh verify-redirects`.
        testing:
          - Run `bunx vitest run --silent='passed-only' 'tests/synthetic/domains.spec.ts'` locally pre-merge.
        documentation:
          - Document redirect map in `docs/self-hosting/migration-hermes-chat.md` appendix.
      - id: TASK-HC-006B
        type: engineering
        owner: observability
        description: >-
          Update Grafana dashboards, Prometheus alerts, and Statuspage automation to reference Hermes domains and uptime SLIs.
        references:
          - observability/grafana/
          - scripts/automation/statuspage-sync.ts
        automation:
          - Schedule nightly Statuspage sync via GitHub Actions to avoid manual updates.
        testing:
          - Validate dashboards via automated screenshot diff tool in `tests/observability/dashboard.spec.ts`.
        documentation:
          - Update monitoring guide in `docs/development/observability.md`.

  - id: STORY-HC-007
    epic_id: EPIC-HC-004
    title: Launch communications & enablement package
    priority: P0
    description: >-
      Deliver Hermes Chat announcement materials, in-app education, and success enablement collateral with automated
      distribution and analytics tracking.
    # Context: Supports go-to-market enablement plan from docs/BRANDING.md#dependencies--action-items.
    acceptance_criteria:
      - >-
        Announcement posts published to `docs/changelog/2025-hermes-chat-launch.md`, marketing blog, and in-app modal with
        consistent messaging + UTMs.
      - >-
        Customer success toolkit (email templates, FAQ, migration script) stored in `docs/usage/` and surfaced in-app.
      - >-
        Iterable/Marketo workflows updated with Hermes segmentation and scheduled automation.
    testing:
      - >-
        Run documentation link checker `bun run lint:docs` to ensure CTA integrity.
      - >-
        QA in-app education flows via `tests/e2e/rebrand.spec.ts` gating on CTA events.
    documentation:
      - >-
        Archive enablement assets in `docs/wiki/gtm/hermes-chat-launch.md` with versioning notes.
    tasks:
      - id: TASK-HC-007A
        type: marketing-ops
        owner: growth-eng
        description: >-
          Build and schedule Iterable/Marketo workflows with Hermes segments using API-driven scripts under `scripts/automation/`.
        references:
          - scripts/automation/
          - docs/changelog/2025-hermes-chat-launch.md
        automation:
          - Add CI job to lint marketing automation configs before deployment.
        testing:
          - Fire test campaigns to sandbox audience verifying event tracking.
        documentation:
          - Document workflow IDs + triggers in `docs/wiki/gtm/hermes-chat-launch.md`.
      - id: TASK-HC-007B
        type: content
        owner: product-marketing
        description: >-
          Draft announcement blog, changelog entry, FAQ, and in-app copy referencing Hermes positioning.
        references:
          - docs/changelog/2025-hermes-chat-launch.md
          - docs/usage/
        automation:
          - Use markdown linter + translation sync via `scripts/rebrand_hermes_chat.sh prepare-content`.
        testing:
          - Run `bun run lint:docs` and peer review by legal/compliance.
        documentation:
          - Store approval notes in `docs/wiki/gtm/hermes-chat-launch.md`.

  - id: STORY-HC-008
    epic_id: EPIC-HC-004
    title: Instrument analytics for Hermes adoption dashboards
    priority: P1
    description: >-
      Implement analytics schema updates, dashboards, and data quality automation to measure Hermes Chat adoption across web,
      product, and support channels.
    # Context: Tracks success metrics defined in docs/BRANDING.md#success-metrics--signals.
    acceptance_criteria:
      - >-
        Analytics schema updated in `packages/const/analytics.ts` with Hermes events, documented in tracking plan.
      - >-
        Amplitude/Looker dashboards published with baseline metrics captured GA +14 days.
      - >-
        Data quality monitors alert on missing events within 1 hour.
    testing:
      - >-
        Add schema tests in `tests/analytics/tracking-plan.spec.ts` verifying payload shapes.
      - >-
        Run data backfill dry-run verifying no duplicate events.
    documentation:
      - >-
        Update tracking plan in `docs/development/analytics.md` and share in stakeholder channel.
    tasks:
      - id: TASK-HC-008A
        type: data-engineering
        owner: data-platform
        description: >-
          Update event schemas in `packages/const/analytics.ts`, adjust ingestion pipeline configs, and backfill historical data
          with Hermes identifiers.
        references:
          - packages/const/analytics.ts
          - analytics/pipeline/
        automation:
          - Add schema validation step to CI via `bunx vitest run --silent='passed-only' 'tests/analytics/*'`.
        testing:
          - Execute backfill dry-run in staging warehouse and validate row counts.
        documentation:
          - Document pipeline changes in `docs/development/analytics.md`.
      - id: TASK-HC-008B
        type: data-analytics
        owner: biz-ops
        description: >-
          Build Looker dashboard + Amplitude boards for Hermes adoption metrics and integrate alerts with Slack + PagerDuty.
        references:
          - analytics/dashboards/
          - docs/development/analytics.md
        automation:
          - Schedule nightly refresh jobs via dbt Cloud or Looker scheduler.
        testing:
          - Validate dashboards using screenshot diffs stored under `tests/analytics/dashboard-visual.spec.ts`.
        documentation:
          - Capture metric definitions + owners in `docs/development/analytics.md` appendix.

  - id: STORY-HC-101
    epic_id: EPIC-HC-005
    title: Enforce enterprise SSO and foundational RBAC guardrails
    priority: P0
    description: >-
      Implement mandatory OIDC/SAML SSO across the Next.js gateway, codify organization/project hierarchy, and enforce
      Owner/Admin/Editor/Viewer roles for web, API, and plugin paths.
    acceptance_criteria:
      - >-
        NextAuth (or custom OIDC) flows configured for Okta, Entra ID, and Google with IdP metadata stored in Vault and SSO
        enforced via feature flag toggle.
      - >-
        Organization, Project, MemberRole, and Invitation models migrated via Drizzle with tenant-aware foreign keys and
        optimistic concurrency controls.
      - >-
        API and UI routes guarded by reusable RBAC middleware returning 403 for unauthorized roles and logging attempts to THEMIS.
    testing:
      - >-
        Add e2e coverage in `tests/e2e/identity/sso.spec.ts` for sign-in, logout, session refresh, and disabled password login fallback.
      - >-
        Implement RBAC unit tests (`bunx vitest run --silent='passed-only' 'tests/unit/rbac/*'`) verifying guard behavior across permutations.
    documentation:
      - >-
        Document SSO onboarding and RBAC hierarchy in `docs/usage/enterprise-security.md` with IdP-specific setup instructions.
    tasks:
      - id: TASK-HC-101A
        type: engineering
        owner: identity-platform
        description: >-
          Wire NextAuth custom provider adapters for Okta, Entra ID, and Google with PKCE + nonce validation, storing client secrets
          in Vault/THEMIS and retrieving via signed service tokens.
        references:
          - apps/web/app/api/auth/[...nextauth]/route.ts
          - packages/server/auth/
          - scripts/vault/
        automation:
          - Terraform module `infra/identity/` provisions IdP applications and exports metadata to Vault.
        testing:
          - Run `bunx vitest run --silent='passed-only' 'tests/unit/auth/*'` plus `tests/e2e/identity/sso.spec.ts`.
        documentation:
          - Update `docs/self-hosting/sso.md` with automated setup script usage and rollback steps.
      - id: TASK-HC-101B
        type: engineering
        owner: platform-core
        description: >-
          Introduce Organization, Project, Membership, and Role tables via Drizzle migrations with tenant-aware policies enforced in Postgres
          Row Level Security and mirrored in application middleware.
        references:
          - drizzle/schema/
          - src/server/rbac/
        automation:
          - Add migration verification to `scripts/db/verify-migrations.ts` ensuring RLS + policies exist.
        testing:
          - Execute `bunx vitest run --silent='passed-only' 'tests/unit/rbac/*'` and new integration tests in `tests/integration/db/rbac.spec.ts`.
        documentation:
          - Extend `docs/development/database.md` with ERD diagrams and tenancy notes.
      - id: TASK-HC-101C
        type: engineering
        owner: security-engineering
        description: >-
          Build reusable RBAC guard middleware for Next.js (server actions, API routes) and plugin execution contexts, instrumenting denied attempts
          to THEMIS audit log stream.
        references:
          - src/server/middleware/rbac.ts
          - packages/plugins/
        automation:
          - Register audit schema in `scripts/audit/register_schema.ts` to auto-validate payloads during CI.
        testing:
          - Run `bunx vitest run --silent='passed-only' 'tests/unit/middleware/rbacGuard.spec.ts'` and e2e regression suite.
        documentation:
          - Update `docs/usage/enterprise-security.md` guardrail sections with troubleshooting tips.

  - id: STORY-HC-102
    epic_id: EPIC-HC-005
    title: Vault-backed provider key proxy with quotas and audit trails
    priority: P0
    description: >-
      Centralize provider credential storage in Vault/THEMIS, serve requests through a proxy enforcing quotas/rate limits, and emit SAIG-compatible
      audit events for every key usage.
    acceptance_criteria:
      - >-
        Key proxy exposes REST/gRPC endpoints for model/tool invocations without exposing raw credentials to clients; per-tenant quotas configurable via
        admin console.
      - >-
        THEMIS audit log stream records key issuance, usage, rotation, and revocation with verifiable hash chain.
      - >-
        Client applications load credentials via short-lived signed tokens scoped to tenant + model.
    testing:
      - >-
        Security regression harness (`bun run test:security`) fuzzes proxy rate limits and leakage scenarios.
      - >-
        Integration tests in `tests/integration/key-proxy.spec.ts` validate quota enforcement and audit events.
    documentation:
      - >-
        Document key custody model and rotation workflows in `docs/usage/enterprise-security.md` and `docs/operations/key-proxy.md`.
    tasks:
      - id: TASK-HC-102A
        type: engineering
        owner: security-engineering
        description: >-
          Implement NestJS (or Fastify) microservice backed by Vault/THEMIS for credential storage, issuing short-lived signed tokens and forwarding
          provider calls with quota enforcement.
        references:
          - apps/services/key-proxy/
          - packages/sdk/
        automation:
          - GitHub Actions deploy job publishes container to GHCR and provisions Vault roles automatically.
        testing:
          - Run `bunx vitest run --silent='passed-only' 'apps/services/key-proxy/tests/*'` plus integration suites.
        documentation:
          - Update service README with deployment + monitoring instructions.
      - id: TASK-HC-102B
        type: engineering
        owner: compliance-ops
        description: >-
          Wire THEMIS audit emitters for key lifecycle events, generating SAIG-compatible append-only logs and providing CLI `audit_export --since --tenant`
          for compliance teams.
        references:
          - packages/audit/
          - scripts/audit/
        automation:
          - Schedule nightly export verification job uploading Merkle proofs to secure storage.
        testing:
          - Execute `bunx vitest run --silent='passed-only' 'tests/unit/audit/*'` and golden file comparisons.
        documentation:
          - Document audit export/verification in `docs/operations/audit.md`.

  - id: STORY-HC-103
    epic_id: EPIC-HC-006
    title: Mnemosyne-backed ingestion pipeline with retention and redaction
    priority: P0
    description: >-
      Replace local vector ingestion with Mnemosyne SDK, layering adaptive chunking, virus scanning, PII redaction, and tenant-specific retention/legal hold controls.
    acceptance_criteria:
      - >-
        Ingestion workers push embeddings to Mnemosyne using per-tenant namespaces and emit deletion receipts during retention expiry or manual erasure.
      - >-
        Knowledge ingestion UI surfaces health metrics (token usage, redaction status) and blocks promotion when scans fail.
      - >-
        Legal hold toggles prevent deletion while logging overrides to THEMIS.
    testing:
      - >-
        Run `bunx vitest run --silent='passed-only' 'tests/mnemosyne/ingestion.spec.ts'` covering happy/edge paths.
      - >-
        Integration tests simulate large document batches via `tests/perf/ingestion.load.ts` to validate scaling.
    documentation:
      - >-
        Update `docs/architecture/memory.md` and ingestion runbooks with pipeline diagrams and automation scripts.
    tasks:
      - id: TASK-HC-103A
        type: engineering
        owner: knowledge-platform
        description: >-
          Build ingestion orchestrator (BullMQ/Temporal) that runs virus scan, MIME validation, adaptive chunking, and PII redaction before submitting to Mnemosyne.
        references:
          - apps/services/ingestion/
          - packages/workers/
        automation:
          - Terraform-managed Redis/Temporal clusters with autoscaling metrics.
        testing:
          - Execute worker unit tests and pipeline integration suites with mocked Mnemosyne endpoints.
        documentation:
          - Add pipeline walkthrough to `docs/architecture/memory.md`.
      - id: TASK-HC-103B
        type: engineering
        owner: compliance-ops
        description: >-
          Implement retention + legal hold engine storing policies per tenant/project, scheduling expirations, and writing THEMIS audit events upon deletion or hold toggles.
        references:
          - packages/compliance/
          - drizzle/schema/compliance.ts
        automation:
          - Scheduled job `scripts/compliance/enforce_retention.ts` runs via GitHub Actions workflow dispatch.
        testing:
          - Run `bunx vitest run --silent='passed-only' 'tests/unit/compliance/*'` plus time-travel integration tests.
        documentation:
          - Extend compliance docs with policy configuration and SLA expectations.
      # Focus: UI/observability surfaces for ingestion health signals.
      - id: TASK-HC-103C
        type: engineering
        owner: knowledge-experience
        description: >-
          Build knowledge ingestion health experience with dashboard panes under `src/app/[variants]/(main)/knowledge/` that visualize token usage trends, redaction throughput, and promotion blockers while reusing shared widgets from `src/features/` and `src/components/knowledge` and wiring selectors into `src/store/knowledgeBase`.
        references:
          - src/app/[variants]/(main)/knowledge/
          - src/components/knowledge/
          - src/features/
          - src/store/knowledgeBase/
        automation:
          - Stream ingestion telemetry into UI via SSE/WebSocket bridge and persist to TimeSeries store with automated retention pruning.
          - Schedule diagnostics workflow (`.github/workflows/knowledge-diagnostics.yml`) that exercises redaction simulators nightly and posts results to the dashboard timeline.
        testing:
          - Capture component snapshot coverage with `bunx vitest run --silent='passed-only' 'src/app/[variants]/(main)/knowledge/**/*.spec.tsx'` ensuring deterministic chart + table renders.
          - Add Playwright journeys in `tests/e2e/knowledge-health.spec.ts` validating promotion gating, diagnostics history, and redaction drill-downs.
          - Expand Vitest store selector suites (`tests/unit/store/knowledgeBase.selectors.spec.ts`) to assert token usage aggregations and blocker state machines.
        documentation:
          - Update `docs/architecture/memory.md` with ingestion health dashboards, telemetry architecture, and automation data flows.
          - Extend runbooks (`docs/runbooks/knowledge-ingestion.md`) with troubleshooting steps for telemetry gaps, diagnostics failures, and promotion unblock procedures.

  - id: STORY-HC-104
    epic_id: EPIC-HC-007
    title: Chat-triggered URS playbook execution with approvals
    priority: P1
    description: >-
      Allow users to discover, parameterize, and execute URS playbooks directly from chat while capturing approvals, SLAs, and compensating actions with full audit coverage.
    acceptance_criteria:
      - >-
        Chat UI lists available playbooks with search/filter, input validation, and SLA metadata surfaced.
      - >-
        Execution timeline modal displays DAG progress, retries, compensations, and links to underlying logs.
      - >-
        Approvals require RBAC-authorized reviewers; break-glass overrides emit dedicated audit events.
    testing:
      - >-
        e2e tests in `tests/e2e/playbooks/chat-runner.spec.ts` simulate approval and break-glass flows.
      - >-
        Contract tests validate URS schema compatibility and error handling for timeouts.
    documentation:
      - >-
        Update `docs/usage/runbooks.md` with screenshots and SOPs for approvals + rollback.
    tasks:
      - id: TASK-HC-104A
        type: engineering
        owner: orchestration-platform
        description: >-
          Implement chat-side panel to browse playbooks, capture input forms (zod schemas), and stream status updates via SSE/WebSocket from URS orchestrator.
        references:
          - apps/web/app/(dashboard)/chat/
          - packages/urs-client/
        automation:
          - Generate playbook TypeScript types automatically from URS schema repository via `bun run sync:urs`.
        testing:
          - Run component tests with Testing Library and e2e suites for streaming updates.
        documentation:
          - Document UI patterns in `docs/development/design-system.md` runbook section.
      - id: TASK-HC-104B
        type: engineering
        owner: security-engineering
        description: >-
          Build approval workflow service storing pending approvals, enforcing RBAC checks, and logging decisions to THEMIS including break-glass overrides and SLA breaches.
        references:
          - packages/approvals/
          - drizzle/schema/approvals.ts
        automation:
          - Scheduled SLA monitor job posts alerts to Ops Slack when deadlines breach.
        testing:
          - Run unit + integration tests ensuring multi-approver requirements and compensating action triggers.
        documentation:
          - Update compliance + ops runbooks with approval procedures.

  - id: STORY-HC-105
    epic_id: EPIC-HC-008
    title: Clio-powered streaming voice mode with Lobe fallback
    priority: P1
    description: >-
      Deliver a low-latency voice chat experience backed by Clio STT/TTS with WebRTC transport, VAD, and automatic fallback to Lobe TTS when Clio endpoints are degraded.
    acceptance_criteria:
      - >-
        Web client captures microphone audio, performs on-device VAD, streams to Clio, and plays synthesized responses with <250ms added latency on stable connections.
      - >-
        Fallback to Lobe TTS triggered by health monitor with user notification and audit trail.
      - >-
        Voice transcripts stored in Mnemosyne with retention policies applied.
    testing:
      - >-
        Integration tests stub Clio + Lobe endpoints verifying fallback logic and latency budgets.
      - >-
        Browser automation via Playwright validates microphone permissions and audio playback.
    documentation:
      - >-
        Update `docs/usage/voice-media.md` with configuration steps and troubleshooting.
    tasks:
      - id: TASK-HC-105A
        type: engineering
        owner: realtime-experience
        description: >-
          Build WebRTC transport layer with adaptive bitrate, Clio endpoint negotiation, and metrics hooks for OpenTelemetry spans.
        references:
          - apps/web/app/(dashboard)/voice/
          - packages/realtime/
        automation:
          - Health monitor cron pings Clio/Lobe endpoints and updates feature flag toggles automatically.
        testing:
          - Run WebRTC unit tests and Playwright coverage for microphone flows.
        documentation:
          - Document architecture in `docs/architecture/voice.md`.
      - id: TASK-HC-105B
        type: engineering
        owner: platform-core
        description: >-
          Persist voice transcripts + metadata to Mnemosyne with tenant-aware namespaces and retention, exposing download + erase flows respecting legal hold.
        references:
          - packages/mnemosyne/
          - apps/web/app/api/voice/
        automation:
          - Scheduled retention job ensures transcripts expire per policy and logs outcomes.
        testing:
          - Execute ingestion integration tests ensuring transcripts link to chat sessions.
        documentation:
          - Update retention policy docs with voice-specific details.

  - id: STORY-HC-106
    epic_id: EPIC-HC-009
    title: End-to-end OpenTelemetry with quotas, feature flags, and kill-switches
    priority: P1
    description: >-
      Instrument Hermes Chat frontend/backend/plugins with OpenTelemetry spans, implement tenant-aware quotas, and deliver ops-managed feature flags + kill-switches.
    acceptance_criteria:
      - >-
        Frontend instrumentation exports traces via OpenTelemetry SDK to gateway, including tenant/workspace tags.
      - >-
        Feature flag service integrates with RBAC to restrict toggles to owners and exposes audit history.
      - >-
        Quota engine enforces tenant usage caps with admin dashboard visibility and alerts.
    testing:
      - >-
        Chaos tests simulate provider outages verifying kill-switch + circuit breaker activation.
      - >-
        Telemetry integration tests assert span propagation across async boundaries.
    documentation:
      - >-
        Update `docs/operations/observability.md` with dashboards, runbooks, and flag workflows.
    tasks:
      - id: TASK-HC-106A
        type: engineering
        owner: sre-platform
        description: >-
          Integrate OpenTelemetry SDK in Next.js app, gateway, and worker services, exporting traces/metrics to Grafana stack with tenant attributes and exemplars.
        references:
          - apps/web/
          - packages/server/
          - scripts/observability/
        automation:
          - CI job `ci/otel-verify.yml` validates schema + sampling configs before deploy.
        testing:
          - Run telemetry integration tests and snapshot metrics to ensure budgets.
        documentation:
          - Update observability docs with instrumentation specifics.
      - id: TASK-HC-106B
        type: engineering
        owner: platform-core
        description: >-
          Implement quota + rate limit engine tied to tenant billing plans, expose dashboards, and integrate with feature flag service for kill-switch automation.
        references:
          - packages/quotas/
          - apps/web/app/(dashboard)/admin/
        automation:
          - Scheduled job publishes usage metrics to billing providers and enforces kill-switch triggers.
        testing:
          - Execute quota engine unit tests and e2e scenarios for throttle + alert flows.
        documentation:
          - Extend admin guide with quota configuration instructions.

  - id: STORY-HC-107
    epic_id: EPIC-HC-011
    title: Signed desktop builds with enterprise policy pack
    priority: P2
    description: >-
      Automate signed macOS/Windows desktop builds, enable auto-update with staged rollout, and ship policy pack enforcing SSO-only login plus restricted local capabilities.
    acceptance_criteria:
      - >-
        CI/CD pipeline builds, signs, notarizes, and publishes installers with integrity artifacts stored securely.
      - >-
        Desktop app enforces SSO-only login with offline denial and surfaces policy status in settings.
      - >-
        Policy pack toggles (disable local file I/O, clipboard restrictions) centrally managed and audit logged.
    testing:
      - >-
        Desktop controller tests cover policy enforcement; Playwright smoke suite validates chat flows on signed builds.
      - >-
        Auto-update integration tests confirm staged rollout + rollback.
    documentation:
      - >-
        Update `docs/desktop/enterprise-deployment.md` with signing pipeline, rollout strategy, and policy config.
    tasks:
      - id: TASK-HC-107A
        type: engineering
        owner: desktop-platform
        description: >-
          Configure GitHub Actions to build Electron app for macOS/Windows, integrate with secure code-signing service, notarize macOS binaries, and publish to GHCR with release notes.
        references:
          - apps/desktop/
          - .github/workflows/desktop-release.yml
        automation:
          - Use reusable workflow + secrets OIDC to fetch signing certificates on-demand.
        testing:
          - Run Playwright smoke tests against produced installers.
        documentation:
          - Document pipeline configuration and troubleshooting.
      - id: TASK-HC-107B
        type: engineering
        owner: security-engineering
        description: >-
          Implement policy enforcement module in Electron main process locking down local file I/O, clipboard, and enforcing SSO token checks with remote configuration.
        references:
          - apps/desktop/src/main/
          - packages/policies/
        automation:
          - Feature flag toggles retrieved from central service with signed configs and fallback cache.
        testing:
          - Execute desktop unit tests per `testing-guide/electron-ipc-test.mdc` and manual QA sign-off script.
        documentation:
          - Update policy pack section in enterprise deployment guide.

  - id: STORY-HC-108
    epic_id: EPIC-HC-010
    title: Govern plugin catalog metadata, sandboxing, and observability
    priority: P0
    description: >-
      Deliver enterprise-grade governance for curated plugin catalog entries, including granular permission prompts, egress allowlists,
      WASM sandbox hardening, and admin observability/kill-switch tooling with automated manifest signing.
    # Context: Supports secure plugin ecosystem roadmap per EPIC-HC-010 requirements dossier.
    acceptance_criteria:
      - >-
        Admin catalog UI at `apps/web/app/(dashboard)/admin/plugins/` surfaces curated metadata from `packages/plugins/catalog`,
        permission prompts, and egress allowlist policies with RBAC enforcement and audit trails.
      - >-
        WASM runtime in `packages/plugins/runtime/` enforces CPU/memory/disk quotas, syscalls restrictions, deterministic resource metering,
        and blocks network access outside declared allowlists with automated manifest signature verification.
      - >-
        Observability suite emits sandbox metrics/traces, exposes kill-switch toggles, and GitHub Actions pipeline publishes signed plugin manifests
        with chain-of-custody logs.
    testing:
      - >-
        Run sandbox escape fuzzing harness nightly with coverage reports stored in artifacts; contract tests validate manifest schema + policy enforcement gates.
      - >-
        Execute end-to-end admin approval flow tests validating permission prompts, audit logging, and kill-switch activation within synthetic tenants.
    documentation:
      - >-
        Update `docs/plugins/catalog.md` with governance model, sandbox guarantees, manifest signing workflow, and admin observability procedures.
    tasks:
      - id: TASK-HC-108A
        type: engineering
        owner: admin-platform
        description: >-
          Build plugin catalog + allowlist management UI in `apps/web/app/(dashboard)/admin/plugins/` consuming metadata from `packages/plugins/catalog`,
          rendering permission prompts, and wiring RBAC policy enforcement with exhaustive inline notes for future contributors.
        references:
          - apps/web/app/(dashboard)/admin/plugins/
          - packages/plugins/catalog
        automation:
          - Extend admin build pipeline to auto-generate catalog metadata snapshots and lint RBAC policies during CI to eliminate manual reviews.
        testing:
          - Add Playwright suites covering permission prompt flows, policy editing, and egress allowlist validations plus Vitest component coverage.
        documentation:
          - Capture UI workflows, RBAC scopes, and reviewer checklist updates in `docs/plugins/catalog.md`.
      - id: TASK-HC-108B
        type: engineering
        owner: runtime-security
        description: >-
          Harden `packages/plugins/runtime/` WASM sandbox with capability-based imports, resource quota enforcement, deterministic fuel metering,
          and allowlist-aware network shims while instrumenting copious code comments for maintainability.
        references:
          - packages/plugins/runtime/
          - packages/plugins/catalog
        automation:
          - Configure nightly GitHub Actions fuzz job executing sandbox escape corpus with automatic corpus minimization and alerting on regressions.
        testing:
          - Run WASM runtime unit tests, sandbox escape fuzzers, and contract suites verifying quota + syscall restrictions before merge.
        documentation:
          - Document sandbox guarantees, quota knobs, and fuzz coverage expectations in `docs/plugins/catalog.md` appendices.
      - id: TASK-HC-108C
        type: engineering
        owner: telemetry-ops
        description: >-
          Implement observability + kill-switch dashboards/hooks in `packages/plugins/telemetry`, integrate with feature flagging, and
          author GitHub Actions automation that signs and publishes manifests with tamper-evident logs and rollback toggles.
        references:
          - packages/plugins/telemetry
          - .github/workflows/plugins-manifest-signing.yml
        automation:
          - Ship reusable workflow for manifest signing + attestation upload, broadcasting status to Slack/Teams and blocking deploys on drift.
        testing:
          - Add telemetry integration tests validating metric/trace emission, kill-switch activation drills, and manifest signing pipeline smoke tests.
        documentation:
          - Update `docs/plugins/catalog.md` with dashboard URLs, alert policies, kill-switch SOP, and automation diagrams.
      - id: TASK-HC-108D
        type: security
        owner: assurance-engineering
        description: >-
          Establish contract testing + security validation suite covering manifest schema validation, permission prompt contracts, and sandbox escape fuzzing,
          including signed evidence bundles for audit readiness.
        references:
          - tests/security/plugins/
          - docs/plugins/catalog.md
        automation:
          - Wire manifest schema validation + fuzz results into nightly CI pipelines with auto-generated compliance attestations stored in artifacts.
        testing:
          - Execute `bunx vitest run --silent='passed-only' 'tests/security/plugins/*'` alongside fuzz regression jobs and schema validation CLI.
        documentation:
          - Append security validation checklist and evidence storage process to `docs/plugins/catalog.md` and compliance runbooks.

  - id: STORY-HC-120
    epic_id: EPIC-HC-012
    title: Ship enterprise onboarding wizard with ingestion health and governed agent templates
    priority: P0
    description: >-
      Launch an enterprise-ready onboarding journey that automates workspace provisioning, orchestrates
      ingestion health guardrails, and surfaces curated agent templates with governance context, ensuring
      customers experience a resilient, automation-first setup from day zero.
    # Context: Epic mandates zero-touch automation for onboarding, ingestion stability, and governed templates.
    acceptance_criteria:
      - >-
        Multi-step onboarding wizard in `apps/web/app/(dashboard)/onboarding/` supports autosave/resume,
        audit-friendly event logging, contextual inline guidance for every step, and surfaces automation
        hooks for provisioning providers, rate limits, and agent scaffolds without requiring manual ops
        tickets.
      - >-
        Ingestion health scoring pipeline exposes ACL-aware diagnostics, automated retention tagging,
        remediation playbooks, and streaming status cards within `apps/web/app/(dashboard)/knowledge/`,
        backed by `apps/services/ingestion-health/` APIs capable of simulating large-document loads,
        Mnemosyne knowledge graph integration, and tiered throttling policies.
      - >-
        Enterprise agent template library in `packages/agents/templates/` publishes governance notes,
        version metadata, observability hooks, and admin controls surfaced within the dashboard, with
        automated verification preventing drift from approved baselines.
      - >-
        Idempotent automation jobs provision providers, enforce rate limit policies, and instantiate
        governed agent templates when triggered by wizard completion events, with observable retries,
        centralized provisioning schedules, and rollback semantics.
    testing:
      - >-
        Add wizard e2e resilience coverage (`tests/e2e/onboarding_wizard.resilience.spec.ts`) exercising autosave,
        resume, and automation-trigger scenarios under flaky network simulations.
      - >-
        Implement ingestion large-document simulation suites leveraging `apps/services/ingestion-health/` load test harnesses
        to validate scoring, ACL, and throttling flows before release.
      - >-
        Author snapshot/unit tests for enterprise agent templates ensuring governance metadata, schema integrity,
        and admin surfacing toggles remain stable across releases.
    documentation:
      - >-
        Expand `docs/usage/onboarding-enterprise.md` to cover wizard flow, ingestion health diagnostics,
        automation expectations, and governed template operations with runbooks for SRE/CSM teams.
    tasks:
      - id: TASK-HC-120A
        type: engineering
        owner: onboarding-platform
        description: >-
          Build the multi-step onboarding experience in `apps/web/app/(dashboard)/onboarding/` using scalable state machines,
          persistent autosave (e.g., secure draft API + optimistic UI), rich inline guidance/coach-marks per stage, and
          automation webhooks that trigger idempotent provisioning jobs; include copious inline documentation guiding future
          enhancements.
        references:
          - apps/web/app/(dashboard)/onboarding/
          - apps/services/provisioning/
          - tests/e2e/onboarding_wizard.resilience.spec.ts
        automation:
          - Implement reusable job orchestration (`apps/services/provisioning/jobs/`) that provisions providers, rate limits,
            and baseline agents with retryable steps, centralized observability dashboards, and Mnemosyne sync triggers.
        testing:
          - Execute `bunx vitest run --silent='passed-only' 'tests/e2e/onboarding_wizard.resilience.spec.ts'` with network
            chaos toggled, plus component/unit suites covering autosave reducers and state machines.
        documentation:
          - Update `docs/usage/onboarding-enterprise.md` wizard sections with flow diagrams, automation triggers,
            and recovery SOPs; annotate code comments referencing doc anchors.

      - id: TASK-HC-120B
        type: engineering
        owner: knowledge-insights
        description: >-
          Implement ingestion health scoring, ACL assignment, automated retention tagging, Mnemosyne knowledge graph
          integration, and validation tooling across `apps/web/app/(dashboard)/knowledge/` and `apps/services/ingestion-health/`,
          instrumenting streaming telemetry, large-document simulators, and remediation playbooks with extensive developer
          notes for maintainability.
        references:
          - apps/web/app/(dashboard)/knowledge/
          - apps/services/ingestion-health/
          - tests/services/ingestion-health/
        automation:
          - Create scheduled + on-demand ingestion diagnostics jobs that ingest synthetic corpora, auto-heal ACL drift,
            enforce retention tagging, synchronize Mnemosyne facets, and publish health signals to the wizard automation
            pipeline while enforcing idempotency.
        testing:
          - Run `bunx vitest run --silent='passed-only' 'tests/services/ingestion-health/*'` and execute load simulations
            via `bunx ts-node apps/services/ingestion-health/scripts/run-large-doc-sim.ts` against staging fixtures.
        documentation:
          - Document scoring formulas, ACL remediation SOP, and simulation harness usage in
            `docs/usage/onboarding-enterprise.md` and supporting service READMEs.

      - id: TASK-HC-120C
        type: engineering
        owner: agent-platform
        description: >-
          Publish enterprise agent templates with governance annotations in `packages/agents/templates/`, wire admin surfacing
          into dashboard management panes, connect observability hooks, and ensure template lifecycle automation keeps
          production, staging, and sandbox catalogs in sync with exhaustive inline commentary.
        references:
          - packages/agents/templates/
          - apps/web/app/(dashboard)/admin/agents/
          - tests/packages/agents/templates/
        automation:
          - Extend template publishing pipelines to sign, version, and distribute templates via centralized registries,
            attach observability hooks, and trigger centralized provisioning jobs aligned with onboarding wizard completion
            and nightly drift detection schedules.
        testing:
          - Execute `bunx vitest run --silent='passed-only' 'tests/packages/agents/templates/*'` for snapshot/unit coverage
            and validate admin surfacing via integration harness.
        documentation:
          - Update `docs/usage/onboarding-enterprise.md` with governance note conventions and admin controls,
            and add CHANGELOG entries describing template lifecycle automation.

  - id: STORY-HC-121
    epic_id: EPIC-HC-012
    title: Deliver governed enterprise onboarding, ingestion health, and agent template experience
    priority: P0
    description: >-
      Launch an end-to-end, enterprise-grade enablement journey that unifies the onboarding wizard,
      ingestion health automation, and governed agent template catalog with exhaustive inline notes,
      observability guardrails, and automated provisioning to minimize manual operations while
      scaling to pre-production workloads.
    # Context: Extends EPIC-HC-012 scope to stitch onboarding, ingestion, and agent catalog pillars
    # into a cohesive enterprise rollout with automation-first delivery expectations.
    acceptance_criteria:
      - >-
        Multi-step onboarding wizard at `apps/web/app/(dashboard)/onboarding/` guides administrators
        through workspace, data, and automation setup with autosave, contextual help, and rate-limited
        trigger orchestration; every step includes inline implementation notes and emits analytics to
        the observability bus.
      - >-
        Ingestion health services under `apps/services/ingestion-health/` compute tenant-level scores,
        automate retention and ACL tagging, surface actionable dashboards in
        `apps/web/app/(dashboard)/knowledge/`, and expose Mnemosyne hooks + alerts for drift,
        saturation, and pipeline failures.
      - >-
        Governed agent template library in `packages/agents/templates/` supports versioned publishing,
        admin surfacing, observability instrumentation, and idempotent provisioning pipelines that
        automatically sync environments while enforcing RBAC and audit logging requirements.
      - >-
        Automation playbooks cover autosave retries, ingestion backfills, template provisioning, and
        rate-limit configurations with CI enforcement to prevent manual drift.
    testing:
      - >-
        Build Playwright/Vitest hybrid E2E coverage for the onboarding wizard, including autosave,
        automation trigger handoffs, and guided setup branching scenarios executed via CI.
      - >-
        Execute ingestion stress and resilience suites targeting scoring accuracy, ACL propagation,
        retention automation, and Mnemosyne callbacks with synthetic + fixture-driven datasets.
      - >-
        Maintain unit and snapshot suites for governed templates, admin surfacing, and provisioning
        flows to guarantee deterministic catalog behaviors across environments.
    automation:
      - >-
        Provision Temporal/Chronicle workflows for onboarding trigger fan-out, ingestion scoring,
        and template publishing, guaranteeing idempotent retries, rate-limited execution, and
        centralized observability exports.
      - >-
        Wire GitHub Actions and deployment pipelines to validate automation manifests, enforce schema
        guardrails, and auto-publish documentation once tasks complete.
    documentation:
      - >-
        Expand `docs/usage/onboarding-enterprise.md`, `docs/operations/ingestion-health.md`, and
        `docs/agents/templates/governed-library.md` with setup guides, automation references, and
        troubleshooting notes before launch.
    tasks:
      - id: TASK-HC-121A
        type: engineering
        owner: activation-platform
        description: >-
          Build the multi-step onboarding flow in `apps/web/app/(dashboard)/onboarding/` with autosave
          persistence, automation trigger wiring, contextual guidance, and comprehensive inline
          developer notes explaining decision points and extensibility hooks.
        references:
          - apps/web/app/(dashboard)/onboarding/
          - packages/automations/
          - tests/e2e/onboarding/
        automation:
          - Orchestrate Temporal workflows to fan out automation triggers, enforce rate limits, and
            record provisioning state changes while keeping autosave idempotent across retries.
          - Add CI lint to verify onboarding step schemas and localization completeness to prevent
            manual regression.
        testing:
          - Implement Playwright wizard E2E suites (`bunx vitest run --silent='passed-only'
            'tests/e2e/onboarding/wizard.spec.ts'`) validating autosave, automation execution, guided
            setup paths, and analytics emission.
          - Add component-level tests for step forms with snapshot coverage to guard UX regressions.
        documentation:
          - Author mandatory updates in `docs/usage/onboarding-enterprise.md` and developer runbooks in
            `docs/development/onboarding/implementation-notes.md` summarizing flow architecture,
            autosave behaviors, and automation troubleshooting.
      - id: TASK-HC-121B
        type: engineering
        owner: data-platform
        description: >-
          Implement ingestion health scoring services in `apps/services/ingestion-health/` and surface
          dashboards plus remediation tooling within `apps/web/app/(dashboard)/knowledge/`, including
          ACL tagging automation, retention policy enforcement, Mnemosyne hook integration, and
          verbose inline comments for maintainability.
        references:
          - apps/services/ingestion-health/
          - apps/web/app/(dashboard)/knowledge/
          - packages/acl/
        automation:
          - Schedule idempotent ingestion scoring, retention pruning, and ACL tagging jobs with
            rate-limited retries, Mnemosyne signal routing, and alert fan-out via centralized
            observability channels.
          - Add CI schema checks ensuring scoring contracts and Mnemosyne hook payloads remain stable.
        testing:
          - Run ingestion stress harness (`bunx vitest run --silent='passed-only'
            'tests/services/ingestion-health/stress.spec.ts'`) and regression suites covering scoring
            accuracy, ACL propagation, retention automation, and Mnemosyne callbacks.
          - Capture UI snapshot + contract tests for knowledge dashboards and automation banners.
        documentation:
          - Update `docs/operations/ingestion-health.md` with scoring formulas, automation schedules,
            and on-call runbooks; add Mnemosyne integration notes to
            `docs/development/observability/mnemosyne-hooks.md` before completion.
      - id: TASK-HC-121C
        type: engineering
        owner: agent-platform
        description: >-
          Publish governed agent templates under `packages/agents/templates/` with admin surfacing,
          observability instrumentation, provisioning pipelines, exhaustive inline commentary, and
          automation to synchronize environments without manual intervention.
        references:
          - packages/agents/templates/
          - apps/web/app/(dashboard)/admin/agents/
          - scripts/agents/provisioning/
        automation:
          - Implement idempotent provisioning jobs and rate-limited rollout pipelines that version,
            sign, and distribute templates across environments while emitting telemetry and audit logs.
          - Configure GitHub Actions to validate template manifests, regenerate docs, and notify admins
            on drift or provisioning failures.
        testing:
          - Expand template unit + snapshot suites (`bunx vitest run --silent='passed-only'
            'tests/packages/agents/templates/**/*'`) ensuring governed metadata, admin surfacing, and
            provisioning hooks remain stable.
          - Add smoke tests validating provisioning pipelines against staging sandboxes with rollback
            verification.
        documentation:
          - Refresh `docs/agents/templates/governed-library.md` with publishing SOPs, provisioning
            automation diagrams, and observability dashboards; append template playbooks to
            `docs/runbooks/agents/templates.md`.

  - id: STORY-HC-010
    epic_id: EPIC-HC-010
    title: Harden plugin catalog lifecycle with sandboxed execution guardrails
    priority: P0
    description: >-
      Deliver an enterprise-grade plugin catalog experience that captures rich metadata, enforces
      explicit permission prompts, governs egress allowlists, executes untrusted code inside the
      WASM sandbox runtime, instruments analytics for adoption + drift detection, and provides a
      remote kill-switch path for rapid containment.
    # Context: Platform security review EPIC-HC-010 outlines compliance controls for pre-production
    # plugin distribution and execution.
    acceptance_criteria:
      - >-
        Admin catalog surfaces curated metadata (capabilities, data residency, security posture)
        for every manifest sourced from registry sync, with inline developer notes and traceable
        history.
      - >-
        Permission prompts render in the admin plugin console with granular scopes, rationale,
        and automated approval workflows mapped to tenant RBAC policies.
      - >-
        Runtime enforces declarative egress allowlists per plugin manifest and blocks outbound
        connections not represented in signed policy bundles.
      - >-
        WASM sandbox runtime isolates plugins with CPU/memory quotas, host capability shims, and
        runtime attestation hooks emitting audit trails via telemetry package.
      - >-
        Kill-switch automation can remotely disable plugins across environments within 5 minutes,
        logging actions, notifying stakeholders, and rolling back registry exposure.
    testing:
      - >-
        Run sandbox escape fuzzing harness (`bunx vitest run --silent='passed-only'
        'packages/plugins/runtime/tests/fuzz/*'`) for each merge and publish nightly reports.
      - >-
        Validate plugin manifest schema via `bun run lint:plugins-manifest` and capture golden
        snapshots for admin UI + runtime integration tests in `tests/integration/plugins/catalog.spec.ts`.
      - >-
        Record integration snapshot artifacts (admin console + telemetry dashboards) in CI to
        guard regressions across releases.
    automation:
      - >-
        Schedule nightly WASM fuzzing GitHub Action with flaky-test quarantine + alerting to
        security-oncall.
      - >-
        Extend registry sync workflow to sign manifests, regenerate SBOMs, enforce egress allowlist
        policy bundles, and publish hash-indexed catalogs to CDN with drift detection alerts routed to
        observability dashboards.
    documentation:
      - >-
        Update `docs/plugins/catalog.md` with developer notes covering metadata curation, prompt
        copy decks, sandbox guardrails, telemetry signals, automation links, and kill-switch SOPs.
    tasks:
      - id: TASK-HC-010A
        type: engineering
        owner: platform-experience
        description: >-
          Extend `apps/web/app/(dashboard)/admin/plugins/` UI + server routes to display curated
          metadata, render consent prompts with inline rationale, persist approval audit logs,
          enforce declarative egress allowlists, and centralize configuration toggles with exhaustive
          developer comments for maintainers.
        references:
          - apps/web/app/(dashboard)/admin/plugins/
          - packages/plugins/catalog/
          - tests/integration/plugins/
        automation:
          - Generate metadata + allowlist JSON from signed manifest bundles during build via
            `scripts/plugins/catalog_sync.ts`, wire GitHub Action to auto-populate admin caches, and
            gate merges on manifest schema validation (`bun run lint:plugins-manifest`).
        testing:
          - Execute `bunx vitest run --silent='passed-only' 'tests/integration/plugins/catalog.spec.ts'`
            plus Playwright admin snapshots to ensure prompt flows, approval lifecycles, and allowlist
            enforcement scenarios function.
        documentation:
          - Add admin workflow diagrams, configuration automation notes, and schema validation SOP to
            `docs/plugins/catalog.md`, including guidance on minimizing manual approvals via policy
            inheritance and analytics dashboards.
      - id: TASK-HC-010B
        type: engineering
        owner: runtime-security
        description: >-
          Fortify `packages/plugins/runtime/` WASM sandbox with deterministic capability bridges,
          granular CPU/memory/io quotas, THEMIS-compatible audit emitters, and integrated fuzz harnesses
          that feed telemetry + failure corpora back into regression suites.
        references:
          - packages/plugins/runtime/
          - packages/plugins/runtime/tests/
          - scripts/fuzz/
        automation:
          - Add Temporal/Chronicle pipeline to seed nightly fuzz jobs, upload minimized crash cases,
            open auto-generated issues with stack traces + reproduction scripts, and enforce CI hooks that
            block merges when sandbox attestation checks fail.
        testing:
          - Run `bunx vitest run --silent='passed-only' 'packages/plugins/runtime/tests/**/*'`, execute
            `scripts/fuzz/run_sandbox_escape.sh --ci` to validate harness integration, and record nightly
            fuzz metrics artifacts for auditability.
        documentation:
          - Document sandbox quotas, host capability shims, THEMIS audit event taxonomy, and fuzz triage
            flow in `docs/plugins/catalog.md` developer notes appendix and update security runbooks.
      - id: TASK-HC-010C
        type: engineering
        owner: observability-platform
        description: >-
          Instrument telemetry + kill-switch automation across `packages/plugins/telemetry/` and GitHub
          Actions pipelines to publish signed manifests, stream analytics + audit signals, trigger automated
          rollback, and expose dashboards minimizing manual operations.
        references:
          - packages/plugins/telemetry/
          - .github/workflows/plugins-*.yml
          - scripts/plugins/
        automation:
          - Wire kill-switch workflow to signed manifest publication, Slack/PagerDuty alerts, automated
            registry sync rollback with dry-run verification on schedule, and CI hooks that validate
            telemetry schema coverage + manifest signatures before deployment.
        testing:
          - Validate telemetry emitters via `bunx vitest run --silent='passed-only'
            'packages/plugins/telemetry/tests/**/*'`, assert kill-switch CI workflow outcomes in staging
            using workflow dispatch smoke tests, and verify manifest signing + registry sync in pipeline
            dry-runs.
        documentation:
          - Record telemetry schema, kill-switch runbook, manifest signing checklist, and registry sync
            automation steps in `docs/plugins/catalog.md` with explicit developer checklist + troubleshooting
            notes plus updates to security operations playbooks.
